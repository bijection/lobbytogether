'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = require('styled-jsx/style.js');

var _style2 = _interopRequireDefault(_style);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _head = require('next/dist/lib/head.js');

var _head2 = _interopRequireDefault(_head);

var _reactTabs = require('react-tabs');

var _reactDisqusThread = require('react-disqus-thread');

var _reactDisqusThread2 = _interopRequireDefault(_reactDisqusThread);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/guillermo/projects/fastpolitics/pages/index.js?entry';


var hilight = '#48f';
var possesive = {
    m: 'his',
    f: 'her'
};

var Vote = function Vote(_ref) {
    var vote = _ref.vote;
    return vote ? _react2.default.createElement('span', { className: 'yes', style: { color: 'green' }, __source: {
            fileName: _jsxFileName,
            lineNumber: 12
        }
    }, 'YES') : _react2.default.createElement('span', { className: 'no', style: { color: 'red' }, __source: {
            fileName: _jsxFileName,
            lineNumber: 12
        }
    }, 'NO');
};

var Header = function Header(_ref2) {
    var senator = _ref2.senator,
        title = _ref2.title,
        vote = _ref2.vote,
        number = _ref2.number,
        party = _ref2.party,
        state = _ref2.state;
    return _react2.default.createElement('div', { className: 'header', 'data-jsx': 2954389018,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 14
        }
    }, _react2.default.createElement('div', {
        'data-jsx': 2954389018,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 21
        }
    }, _react2.default.createElement('h1', {
        'data-jsx': 2954389018,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 22
        }
    }, 'Senator ', senator, ' ', _react2.default.createElement('span', { className: 'number', 'data-jsx': 2954389018,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 22
        }
    }, '(', party, '-', state, ')'), ','), _react2.default.createElement('h1', {
        'data-jsx': 2954389018,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 23
        }
    }, 'Vote ', _react2.default.createElement(Vote, { vote: vote, __source: {
            fileName: _jsxFileName,
            lineNumber: 23
        }
    }), ' on the ', _react2.default.createElement('span', { className: 'title', 'data-jsx': 2954389018,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 23
        }
    }, title), _react2.default.createElement('span', { className: 'number', 'data-jsx': 2954389018,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 23
        }
    }, '(', number, ')'))), _react2.default.createElement(_style2.default, {
        styleId: 2954389018,
        css: '.header[data-jsx="2954389018"]{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.creator[data-jsx="2954389018"]{-webkit-text-align:center;text-align:center}.avatar[data-jsx="2954389018"]{display:inline-block;padding:40px;background:#eee}.title[data-jsx="2954389018"]{margin-right:10px}.number[data-jsx="2954389018"]{opacity:.5}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhZ2VzL2luZGV4LmpzP2VudHJ5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdCZ0IsQUFHMEIsQUFFSyxBQUVHLEFBSUgsQUFFUCxZQUFTLE9BRk8sR0FKb0IsY0FBNkIsVUFGakQsT0FFMEQseUJBSnhDLGlHQUFTIiwiZmlsZSI6InBhZ2VzL2luZGV4LmpzP2VudHJ5Iiwic291cmNlUm9vdCI6Ii9Vc2Vycy9ndWlsbGVybW8vcHJvamVjdHMvZmFzdHBvbGl0aWNzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJ1xuXG5pbXBvcnQgeyBUYWIsIFRhYnMsIFRhYkxpc3QsIFRhYlBhbmVsIH0gZnJvbSAncmVhY3QtdGFicydcbmltcG9ydCBSZWFjdERpc3F1c1RocmVhZCBmcm9tICdyZWFjdC1kaXNxdXMtdGhyZWFkJ1xuXG5jb25zdCBoaWxpZ2h0ID0gJyM0OGYnXG5jb25zdCBwb3NzZXNpdmUgPSB7XG4gICAgbTogJ2hpcycsXG4gICAgZjogJ2hlcicsXG59XG5cbmNvbnN0IFZvdGUgPSAoe3ZvdGV9KSA9PiB2b3RlID8gPHNwYW4gY2xhc3NOYW1lPVwieWVzXCIgc3R5bGU9e3tjb2xvcjonZ3JlZW4nfX0+WUVTPC9zcGFuPiA6IDxzcGFuIGNsYXNzTmFtZT1cIm5vXCIgc3R5bGU9e3tjb2xvcjoncmVkJ319Pk5PPC9zcGFuPlxuXG5jb25zdCBIZWFkZXIgPSAoe3NlbmF0b3IsIHRpdGxlLCB2b3RlLCBudW1iZXIsIHBhcnR5LCBzdGF0ZX0pID0+IDxkaXYgY2xhc3NOYW1lPSdoZWFkZXInPlxuey8qICAgIDxkaXYgY2xhc3NOYW1lPVwiY3JlYXRvclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImF2YXRhclwiPjwvZGl2PlxuICAgICAgICA8ZGl2PkJ5IDxiPlJvbWluYSBOaWtvbGnEhzwvYj48L2Rpdj5cbiAgICAgICAgPGRpdj5GaXJzdCBjcmVhdGVkPC9kaXY+XG4gICAgPC9kaXY+XG4qL31cbiAgICA8ZGl2PlxuICAgICAgICA8aDE+U2VuYXRvciB7c2VuYXRvcn0gPHNwYW4gY2xhc3NOYW1lPSdudW1iZXInPih7cGFydHl9LXtzdGF0ZX0pPC9zcGFuPiw8L2gxPlxuICAgICAgICA8aDE+Vm90ZSA8Vm90ZSB2b3RlPXt2b3RlfS8+IG9uIHRoZSA8c3BhbiBjbGFzc05hbWU9XCJ0aXRsZVwiPnt0aXRsZX08L3NwYW4+PHNwYW4gY2xhc3NOYW1lPVwibnVtYmVyXCI+KHtudW1iZXJ9KTwvc3Bhbj48L2gxPlxuICAgIDwvZGl2PlxuICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLmhlYWRlciB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jcmVhdG9yIHtcbiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hdmF0YXIge1xuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgICAgcGFkZGluZzogNDBweDtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNlZWU7XG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgLnRpdGxlIHtcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5udW1iZXIge1xuICAgICAgICAgICAgb3BhY2l0eTogLjU7XG4gICAgICAgIH1cbiAgICBgfTwvc3R5bGU+XG48L2Rpdj5cblxuY29uc3QgUHJvZ3Jlc3MgPSAoe3BlcmNlbnR9KSA9PiA8ZGl2IGNsYXNzTmFtZT0ncHJvZ3Jlc3MnPlxuICAgIDxkaXYgc3R5bGU9e3t3aWR0aDogcGVyY2VudCArICclJ319PjwvZGl2PlxuICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLnByb2dyZXNzIHtcbiAgICAgICAgICAgIGhlaWdodDogNHB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZDogI2VlZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5wcm9ncmVzcyA+IGRpdiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2hpbGlnaHR9O1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICB9XG4gICAgYH08L3N0eWxlPlxuPC9kaXY+XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI5MDExMDIvaG93LXRvLXByaW50LWEtbnVtYmVyLXdpdGgtY29tbWFzLWFzLXRob3VzYW5kcy1zZXBhcmF0b3JzLWluLWphdmFzY3JpcHQjMjkwMTI5OFxuY29uc3Qgd2l0aGNvbW1hcyA9IHggPT4geC50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiLFwiKVxuXG5jb25zdCBBY3Rpb25zID0gKHtwbGVkZ2VkLCBnb2FsLCBiYWNrZXJzLCBkYXlzbGVmdCwgc2VuYXRvciwgdm90ZSwgc2V4LCBudW1iZXJ9KSA9PiA8ZGl2IGNsYXNzTmFtZT1cImFjdGlvbnNcIj5cbiAgICA8UHJvZ3Jlc3MgcGVyY2VudD17cGxlZGdlZCAvIGdvYWwgKiAxMDB9IC8+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJtZXRyaWNcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXRyaWMtbnVtIHJhaXNlZFwiPiR7d2l0aGNvbW1hcyhwbGVkZ2VkKX08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXRyaWMtbnVtLWRlc2NcIj5wbGVkZ2VkIG9mICR7d2l0aGNvbW1hcyhnb2FsKX0gZ29hbDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3NOYW1lPVwibWV0cmljXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWV0cmljLW51bVwiPntiYWNrZXJzfTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldHJpYy1udW0tZGVzY1wiPmJhY2tlcnM8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldHJpY1wiPiAgICBcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZXRyaWMtbnVtXCI+e2RheXNsZWZ0fTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1ldHJpYy1udW0tZGVzY1wiPmRheXMgdG8gZ288L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImJhY2tcIj5CdXkgdGhpcyB2b3RlPC9kaXY+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJzZW1pYmFja3NcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyZW1pbmRcIj5SZW1pbmQgTWU8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaGFyZVwiPlNoYXJlPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJpbmZvXCI+XG4gICAgICAgIDxiPjx1PkNvbmRpdGlvbmFsIERvbmF0aW9uLjwvdT48L2I+IElmIHtzZW5hdG9yfSB2b3RlcyB7dm90ZSA/ICdZRVMnIDogJ05PJ30gb24ge251bWJlcn0sIHRoZSB0b3RhbCBhbW91bnQgcmFpc2VkIChsZXNzIHByb2Nlc3NpbmcgZmVlcykgd2lsbCBiZSBkb25hdGVkIHRvIHtwb3NzZXNpdmVbc2V4XX0gcmVlbGVjdGlvbiBjYW1wYWlnbi4gSWYge3NlbmF0b3J9IHZvdGVzIHshdm90ZSA/ICdZRVMnIDogJ05PJ30gb24ge251bWJlcn0sIGFsbCBkb25hdGlvbnMgd2lsbCBiZSByZWZ1bmRlZC5cbiAgICA8L2Rpdj5cbiAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5hY3Rpb25zIHtcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNDBweDtcbiAgICAgICAgICAgIHdpZHRoOiA0MDBweDtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDU3cHg7XG4gICAgICAgIH1cbiAgICAgICAgLm1ldHJpYyB7XG4gICAgICAgICAgICBtYXJnaW46IDIwcHggMDtcbiAgICAgICAgfVxuICAgICAgICAubWV0cmljLW51bSB7XG4gICAgICAgICAgICBmb250LXNpemU6IDIwMCU7XG4gICAgICAgIH1cbiAgICAgICAgLnJhaXNlZCB7XG4gICAgICAgICAgICBjb2xvcjogJHtoaWxpZ2h0fTtcbiAgICAgICAgfVxuICAgICAgICAubWV0cmljLW51bS1kZXNjIHtcbiAgICAgICAgICAgIG9wYWNpdHk6IC41XG4gICAgICAgIH1cbiAgICAgICAgLmJhY2sge1xuICAgICAgICAgICAgcGFkZGluZzogMjBweCAwO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAke2hpbGlnaHR9O1xuICAgICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgICAgIH1cbiAgICAgICAgLnNlbWliYWNrcyB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogMjBweDtcbiAgICAgICAgfVxuICAgICAgICAuc2VtaWJhY2tzID4gZGl2IHtcbiAgICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICBwYWRkaW5nOiAyMHB4IDA7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZWVlO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgICAgICB9XG4gICAgICAgIC5yZW1pbmQge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICAgIH1cbiAgICAgICAgLmluZm8ge1xuICAgICAgICAgICAgbWFyZ2luOiAxMHB4IDA7XG4gICAgICAgICAgICBmb250LXNpemU6IDgwJTtcbiAgICAgICAgICAgIG9wYWNpdHk6IC41O1xuICAgICAgICB9XG4gICAgYH08L3N0eWxlPlxuPC9kaXY+XG5cbiAgICBcbmNvbnN0IE92ZXJ2aWV3ID0gKHtzZW5hdG9yLCB0aXRsZSwgdm90ZSwgcGxlZGdlZCwgYmFja2Vycywgc3VtbWFyeSwgc3VtbWFyeVNvdXJjZX0pID0+IDxkaXYgY2xhc3NOYW1lPSdvdmVydmlldyc+XG4gICAgPHA+U2VuYXRvciA8Yj57c2VuYXRvcn08L2I+LDwvcD5cbiAgICA8cD5XZSB0aGUgcGVvcGxlIG9mIHRoZSBVbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2EgZGVtYW5kIHRoYXQgeW91IHZvdGUgPFZvdGUgdm90ZT17dm90ZX0vPiBvbiB0aGUgPGI+e3RpdGxlfTwvYj4sIHRoZSBzdW1tYXJ5IG9mIHdoaWNoIGlzIGFzIGZvbGxvd3M6PC9wPlxuICAgIDxibG9ja3F1b3RlPntzdW1tYXJ5fSA8c3BhbiBjbGFzc05hbWU9XCJzdW1tYXJ5LXNvdXJjZVwiPih7c3VtbWFyeVNvdXJjZX0pPC9zcGFuPjwvYmxvY2txdW90ZT5cbiAgICA8cD5JZiB5b3UgZmFpdGhmdWxseSByZXByZXNlbnQgdXMgYnkgdm90aW5nIDxWb3RlIHZvdGU9e3ZvdGV9Lz4gb24gdGhlIDxiPnt0aXRsZX08L2I+LCB3ZSBoYXZlIHBsZWRnZWQgdG8gZG9uYXRlIHRoZSBzdW0gb2YgPHNwYW4gY2xhc3NOYW1lPVwiYW1vdW50XCI+JHt3aXRoY29tbWFzKHBsZWRnZWQpfTwvc3Bhbj4gdG8geW91ciBuZXh0IHJlZWxlY3Rpb24gY2FtcGFpZ24uPC9wPlxuICAgIDxwPllvdXJzIFNpbmNlcmVseSw8L3A+XG4gICAgPHA+PGI+e2JhY2tlcnN9IFVuaXRlZCBTdGF0ZXMgQ2l0aXplbnM8L2I+PC9wPlxuICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLnN1bW1hcnktc291cmNlIHtcbiAgICAgICAgICAgIG9wYWNpdHk6IC41O1xuICAgICAgICB9XG4gICAgICAgIC5vdmVydmlldyB7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMTUwJTtcbiAgICAgICAgICAgIG9wYWNpdHk6IC45O1xuICAgICAgICAgICAgcGFkZGluZzogMjBweDtcbiAgICAgICAgfVxuICAgICAgICAuYW1vdW50IHtcbiAgICAgICAgICAgIGNvbG9yOiAke2hpbGlnaHR9O1xuICAgICAgICB9XG5cbiAgICBgfTwvc3R5bGU+XG48L2Rpdj5cblxuICAgICAgICAgICAgXG5jb25zdCBCaWxsID0gKHtiaWxsVGV4dH0pID0+IDxwcmU+XG4gICAge2JpbGxUZXh0fVxuICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgcHJlIHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICAgICAgICBtYXgtaGVpZ2h0OiA0MDBweDtcbiAgICAgICAgICAgIG92ZXJmbG93OiBzY3JvbGw7XG4gICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgfVxuICAgIGB9PC9zdHlsZT5cbjwvcHJlPlxuXG5cbmNvbnN0IENvbnRlbnRUYWJzID0gKHtzdW1tYXJ5LCBzZW5hdG9yLCB2b3RlLCB0aXRsZSwgc3VtbWFyeVNvdXJjZSwgYmlsbFRleHQsIHBsZWRnZWQsIGJhY2tlcnMsIHNlbmF0b3JJbmZvfSkgPT4gPGRpdiBjbGFzc05hbWU9XCJ0YWJzXCI+XG4gICAgPFRhYnMgc2VsZWN0ZWRUYWJDbGFzc05hbWU9J2FjdGl2ZScgc2VsZWN0ZWRUYWJQYW5lbENsYXNzTmFtZT0ndGFiLXBhbmVsJz5cbiAgICAgICAgPFRhYkxpc3QgY2xhc3NOYW1lPSd0YWItbGlzdCc+XG4gICAgICAgICAgICA8VGFiPk92ZXJ2aWV3PC9UYWI+XG4gICAgICAgICAgICA8VGFiPkJpbGwgVGV4dDwvVGFiPlxuICAgICAgICAgICAgPFRhYj5TZW5hdG9yIEluZm9ybWF0aW9uPC9UYWI+XG4gICAgICAgIDwvVGFiTGlzdD5cblxuICAgICAgICA8VGFiUGFuZWw+XG4gICAgICAgICAgICA8T3ZlcnZpZXdcbiAgICAgICAgICAgICAgICBzZW5hdG9yPXtzZW5hdG9yfVxuICAgICAgICAgICAgICAgIHRpdGxlPXt0aXRsZX1cbiAgICAgICAgICAgICAgICB2b3RlPXt2b3RlfVxuICAgICAgICAgICAgICAgIHBsZWRnZWQ9e3BsZWRnZWR9XG4gICAgICAgICAgICAgICAgYmFja2Vycz17YmFja2Vyc31cbiAgICAgICAgICAgICAgICBzdW1tYXJ5PXtzdW1tYXJ5fVxuICAgICAgICAgICAgICAgIHN1bW1hcnlTb3VyY2U9e3N1bW1hcnlTb3VyY2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8L1RhYlBhbmVsPlxuICAgICAgICA8VGFiUGFuZWw+XG4gICAgICAgICAgICA8QmlsbCBiaWxsVGV4dD17YmlsbFRleHR9Lz5cbiAgICAgICAgPC9UYWJQYW5lbD5cbiAgICAgICAgPFRhYlBhbmVsPlxuICAgICAgICAgICAgPGlmcmFtZSBzcmM9e3NlbmF0b3JJbmZvfT48L2lmcmFtZT5cbiAgICAgICAgPC9UYWJQYW5lbD5cbiAgICA8L1RhYnM+XG4gICAgPHN0eWxlIGpzeCBnbG9iYWw+e2BcbiAgICAgICAgLnRhYiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLnRhYi1saXN0IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWU7XG4gICAgICAgICAgICBoZWlnaHQ6NjBweDtcbiAgICAgICAgfVxuICAgICAgICAudGFiLWxpc3QgbGkge1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICB9XG4gICAgICAgIC50YWItbGlzdCBsaS5hY3RpdmUge1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICR7aGlsaWdodH07XG4gICAgICAgIH1cbiAgICAgICAgaWZyYW1lIHtcbiAgICAgICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgaGVpZ2h0OiA0MDBweDtcbiAgICAgICAgfVxuICAgIGB9PC9zdHlsZT4gICAgXG48L2Rpdj5cblxuXG5cbmNvbnN0IFBpdGNoID0gKCkgPT4gPGRpdiBjbGFzc05hbWU9J3BpdGNoJz5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRcIj5cbiAgICAgICAgPENvbnRlbnRUYWJzIFxuICAgICAgICAgICAgc2VuYXRvcj1cIlJvYmVydCBBZGVyaG9sdFwiXG4gICAgICAgICAgICB0aXRsZT0nU2VjdXJpbmcgb3VyIEFncmljdWx0dXJlIGFuZCBGb29kIEFjdCdcbiAgICAgICAgICAgIHN1bW1hcnk9J0guUi4gMTIzOCBhbWVuZHMgdGhlIEhvbWVsYW5kIFNlY3VyaXR5IEFjdCBvZiAyMDAyIHRvIGF1dGhvcml6ZSBhIHByb2dyYW0gdG8gY29vcmRpbmF0ZSB0aGUgRGVwYXJ0bWVudCBvZiBIb21lbGFuZCBTZWN1cml0eeKAmXMgZWZmb3J0cyByZWxhdGVkIHRvIGZvb2QsIGFncmljdWx0dXJlLCBhbmQgdmV0ZXJpbmFyeSBkZWZlbnNlIGZyb20gYWN0cyBvZiB0ZXJyb3Jpc20gYW5kIG90aGVyIGhpZ2gtY29uc2VxdWVuY2UgZXZlbnRzIHRoYXQgcG9zZSBhIHJpc2sgdG8gaG9tZWxhbmQgc2VjdXJpdHkuJ1xuICAgICAgICAgICAgYmlsbFRleHQ9e2JpbGxUZXh0fVxuICAgICAgICAgICAgcGxlZGdlZD17NDkyNDl9XG4gICAgICAgICAgICBiYWNrZXJzPXs3MDF9XG4gICAgICAgICAgICBzZW5hdG9ySW5mbz1cImh0dHBzOi8vZW4ubS53aWtpcGVkaWEub3JnL3dpa2kvUm9iZXJ0X0FkZXJob2x0XCJcbiAgICAgICAgICAgIHN1bW1hcnlTb3VyY2U9XCJSZXB1YmxpY2FuIFBvbGljeSBDb21taXR0ZWVcIlxuICAgICAgICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgICA8QWN0aW9ucyBcbiAgICAgICAgcGxlZGdlZD17NDkyNDl9XG4gICAgICAgIGdvYWw9ezg3MDAwfVxuICAgICAgICBiYWNrZXJzPXs3MDF9XG4gICAgICAgIHNleD0nbSdcbiAgICAgICAgbnVtYmVyPSdILlIuIDEyMzgnXG4gICAgICAgIHNlbmF0b3I9XCJSb2JlcnQgQWRlcmhvbHRcIlxuICAgICAgICBkYXlzbGVmdD17NH0vPlxuICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLmNvbnRlbnQge1xuICAgICAgICAgICAgZmxleDogMVxuICAgICAgICB9XG4gICAgICAgIC5waXRjaCB7XG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4XG4gICAgICAgIH1cbiAgICBgfTwvc3R5bGU+XG48L2Rpdj4gIFxuXG5jbGFzcyBCb2R5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb21wb25lbnREaWRNb3VudCgpe1xuICAgICAgICAvKlxuICAgICAgICB3aW5kb3cuZGlzcXVzX2NvbmZpZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZS51cmwgPSBQQUdFX1VSTDsgIC8vIFJlcGxhY2UgUEFHRV9VUkwgd2l0aCB5b3VyIHBhZ2UncyBjYW5vbmljYWwgVVJMIHZhcmlhYmxlXG4gICAgICAgICAgICB0aGlzLnBhZ2UuaWRlbnRpZmllciA9IFBBR0VfSURFTlRJRklFUjsgLy8gUmVwbGFjZSBQQUdFX0lERU5USUZJRVIgd2l0aCB5b3VyIHBhZ2UncyB1bmlxdWUgaWRlbnRpZmllciB2YXJpYWJsZVxuICAgICAgICB9XG4gICAgICAgICovXG4gICAgICAgIHZhciBkID0gZG9jdW1lbnQsIHMgPSBkLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBzLnNyYyA9ICdodHRwczovL2NvbmRpdGlvbmFsZG9uYXRpb25zLmRpc3F1cy5jb20vZW1iZWQuanMnO1xuICAgICAgICBzLnNldEF0dHJpYnV0ZSgnZGF0YS10aW1lc3RhbXAnLCArbmV3IERhdGUoKSk7XG4gICAgICAgIChkLmhlYWQgfHwgZC5ib2R5KS5hcHBlbmRDaGlsZChzKVxuICAgIH1cblxuICAgIHJlbmRlcigpe1xuXG4gICAgICAgIGNvbnN0IHtudW1iZXIsIHNlbmF0b3J9ID0gdGhpcy5wcm9wc1xuICAgICAgICBjb25zb2xlLmxvZyhudW1iZXIrXCItXCIrc2VuYXRvcilcblxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J2JvZHknPlxuICAgICAgICA8ZGl2IGlkPVwiZGlzcXVzX3RocmVhZFwiPjwvZGl2PlxuXG4gICAgICAgIDxzdHlsZSBqc3ggZ2xvYmFsPntgXG4gICAgICAgICAgICAuYm9keSB7XG4gICAgICAgICAgICAgICAgLy8gYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlZWU7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogNDBweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICNkaXNxdXNfdGhyZWFkIHtcbiAgICAgICAgICAgICAgICBtYXJnaW46YXV0bztcbiAgICAgICAgICAgICAgICB3aWR0aDogMTEwMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+ICAgIFxuICAgIDwvZGl2PlxuICAgIH1cbn1cblxuY29uc3QgVGl0bGUgPSAoKSA9PiA8ZGl2IGNsYXNzTmFtZT0ndGl0bGUnPlxuICAgIDxkaXYgY2xhc3NOYW1lPSdpdGVtJz5FeHBsb3JlPC9kaXY+XG4gICAgPGRpdiBjbGFzc05hbWU9J2l0ZW0nPkFib3V0PC9kaXY+XG4gICAgPGRpdiBjbGFzc05hbWU9J2l0ZW0gbG9nbyc+TE9CQlk8c3BhbiBjbGFzc05hbWU9XCJ0b2dldGhlclwiPlRPR0VUSEVSPC9zcGFuPjwvZGl2PlxuICAgIDxkaXYgY2xhc3NOYW1lPSdzcGFjZXInPjwvZGl2PlxuICAgIDxkaXYgY2xhc3NOYW1lPSdpdGVtJz5Mb2cgaW48L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT0naXRlbSc+U2lnbiB1cDwvZGl2PlxuICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLnRpdGxlIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICB9XG4gICAgICAgIC5pdGVtLmxvZ28ge1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgbGVmdDogNTAlO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwwKTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgICAgIHBhZGRpbmc6IDE5cHg7XG4gICAgICAgIH1cbiAgICAgICAgLnNwYWNlciB7IFxuICAgICAgICAgICAgZmxleDogMTtcbiAgICAgICAgfVxuICAgICAgICAudG9nZXRoZXIge1xuICAgICAgICAgICAgY29sb3I6ICR7aGlsaWdodH1cbiAgICAgICAgfVxuICAgICAgICAuaXRlbXsgXG4gICAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgICBvcGFjaXR5OiAuNztcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgfVxuICAgIGB9PC9zdHlsZT5cbjwvZGl2PlxuXG5leHBvcnQgZGVmYXVsdCAoKSA9PiA8ZGl2IGNsYXNzTmFtZT1cImFwcFwiPlxuICAgIDxUaXRsZS8+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3cmFwXCI+XG4gICAgICAgIDxIZWFkZXIgXG4gICAgICAgICAgICBzZW5hdG9yPVwiUm9iZXJ0IEFkZXJob2x0XCJcbiAgICAgICAgICAgIHBhcnR5PVwiUlwiXG4gICAgICAgICAgICBzdGF0ZT1cIkFMXCJcbiAgICAgICAgICAgIG51bWJlcj0nSC5SLiAxMjM4J1xuICAgICAgICAgICAgdGl0bGU9J1NlY3VyaW5nIG91ciBBZ3JpY3VsdHVyZSBhbmQgRm9vZCBBY3QnLz5cbiAgICAgICAgPFBpdGNoLz5cbiAgICA8L2Rpdj5cbiAgICA8Qm9keS8+XG4gICAgPHN0eWxlIGpzeCBnbG9iYWw+e2BcbiAgICAgICAgYm9keSB7XG4gICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZjVmNWY1O1xuICAgICAgICB9XG4gICAgICAgIC5hcHAge1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6IEhlbHZldGljYTtcbiAgICAgICAgfVxuICAgICAgICAud3JhcCB7XG4gICAgICAgICAgICB3aWR0aDogMTEwMHB4O1xuICAgICAgICAgICAgbWFyZ2luOiBhdXRvO1xuICAgICAgICB9XG5cbiAgICBgfTwvc3R5bGU+XG48L2Rpdj5cblxuXG5cblxuXG5cblxuXG5cblxuY29uc3QgYmlsbFRleHQgPSBgW0NvbmdyZXNzaW9uYWwgQmlsbHMgMTE1dGggQ29uZ3Jlc3NdXG5bRnJvbSB0aGUgVS5TLiBHb3Zlcm5tZW50IFB1Ymxpc2hpbmcgT2ZmaWNlXVxuW0guUi4gMTIzOCBFbnJvbGxlZCBCaWxsIChFTlIpXVxuXG4gICAgICAgIEguUi4xMjM4XG5cbiAgICAgICAgICAgICAgICAgICAgIE9uZSBIdW5kcmVkIEZpZnRlZW50aCBDb25ncmVzc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGVcblxuICAgICAgICAgICAgICAgICAgICAgICAgVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICBBVCBUSEUgRklSU1QgU0VTU0lPTlxuXG4gICAgICAgICAgQmVndW4gYW5kIGhlbGQgYXQgdGhlIENpdHkgb2YgV2FzaGluZ3RvbiBvbiBUdWVzZGF5LFxuICAgICAgICAgIHRoZSB0aGlyZCBkYXkgb2YgSmFudWFyeSwgdHdvIHRob3VzYW5kIGFuZCBzZXZlbnRlZW5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbiBBY3RcblxuXG4gXG4gICAgVG8gYW1lbmQgdGhlIEhvbWVsYW5kIFNlY3VyaXR5IEFjdCBvZiAyMDAyIHRvIG1ha2UgdGhlIEFzc2lzdGFudCBcbiAgIFNlY3JldGFyeSBvZiBIb21lbGFuZCBTZWN1cml0eSBmb3IgSGVhbHRoIEFmZmFpcnMgcmVzcG9uc2libGUgZm9yIFxuY29vcmRpbmF0aW5nIHRoZSBlZmZvcnRzIG9mIHRoZSBEZXBhcnRtZW50IG9mIEhvbWVsYW5kIFNlY3VyaXR5IHJlbGF0ZWQgXG50byBmb29kLCBhZ3JpY3VsdHVyZSwgYW5kIHZldGVyaW5hcnkgZGVmZW5zZSBhZ2FpbnN0IHRlcnJvcmlzbSwgYW5kIGZvciBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIgcHVycG9zZXMuXG5cbiAgICBCZSBpdCBlbmFjdGVkIGJ5IHRoZSBTZW5hdGUgYW5kIEhvdXNlIG9mIFJlcHJlc2VudGF0aXZlcyBvZiB0aGUgXG5Vbml0ZWQgU3RhdGVzIG9mIEFtZXJpY2EgaW4gQ29uZ3Jlc3MgYXNzZW1ibGVkLFxuU0VDVElPTiAxLiBTSE9SVCBUSVRMRS5cbiAgICBUaGlzIEFjdCBtYXkgYmUgY2l0ZWQgYXMgdGhlIFwiU2VjdXJpbmcgb3VyIEFncmljdWx0dXJlIGFuZCBGb29kIFxuQWN0XCIuXG5TRUMuIDIuIENPT1JESU5BVElPTiBPRiBGT09ELCBBR1JJQ1VMVFVSRSwgQU5EIFZFVEVSSU5BUlkgREVGRU5TRSBcbkFHQUlOU1QgVEVSUk9SSVNNLlxuICAgIChhKSBJbiBHZW5lcmFsLi0tVGl0bGUgViBvZiB0aGUgSG9tZWxhbmQgU2VjdXJpdHkgQWN0IG9mIDIwMDIgKDYgXG5VLlMuQy4gMzExIGV0IHNlcS4pIGlzIGFtZW5kZWQgYnkgYWRkaW5nIGF0IHRoZSBlbmQgdGhlIGZvbGxvd2luZyBuZXcgXG5zZWN0aW9uOlxuICAgIFwiU0VDLiA1MjguIENPT1JESU5BVElPTiBPRiBERVBBUlRNRU5UIE9GIEhPTUVMQU5EIFNFQ1VSSVRZIEVGRk9SVFMgXG4gICAgICBSRUxBVEVEIFRPIEZPT0QsIEFHUklDVUxUVVJFLCBBTkQgVkVURVJJTkFSWSBERUZFTlNFIEFHQUlOU1QgXG4gICAgICBURVJST1JJU00uXG4gICAgXCIoYSkgUHJvZ3JhbSBSZXF1aXJlZC4tLVRoZSBTZWNyZXRhcnksIGFjdGluZyB0aHJvdWdoIHRoZSBcbkFzc2lzdGFudCBTZWNyZXRhcnkgZm9yIEhlYWx0aCBBZmZhaXJzLCBzaGFsbCBjYXJyeSBvdXQgYSBwcm9ncmFtIHRvIFxuY29vcmRpbmF0ZSB0aGUgRGVwYXJ0bWVudCdzIGVmZm9ydHMgcmVsYXRlZCB0byBkZWZlbmRpbmcgdGhlIGZvb2QsIFxuYWdyaWN1bHR1cmUsIGFuZCB2ZXRlcmluYXJ5IHN5c3RlbXMgb2YgdGhlIFVuaXRlZCBTdGF0ZXMgYWdhaW5zdCBcbnRlcnJvcmlzbSBhbmQgb3RoZXIgaGlnaC1jb25zZXF1ZW5jZSBldmVudHMgdGhhdCBwb3NlIGEgaGlnaCByaXNrIHRvIFxuaG9tZWxhbmQgc2VjdXJpdHkuXG4gICAgXCIoYikgUHJvZ3JhbSBFbGVtZW50cy4tLVRoZSBjb29yZGluYXRpb24gcHJvZ3JhbSByZXF1aXJlZCBieSBcbnN1YnNlY3Rpb24gKGEpIHNoYWxsIGluY2x1ZGUsIGF0IGEgbWluaW11bSwgdGhlIGZvbGxvd2luZzpcbiAgICAgICAgXCIoMSkgUHJvdmlkaW5nIG92ZXJzaWdodCBhbmQgbWFuYWdlbWVudCBvZiB0aGUgRGVwYXJ0bWVudCdzIFxuICAgIHJlc3BvbnNpYmlsaXRpZXMgcHVyc3VhbnQgdG8gSG9tZWxhbmQgU2VjdXJpdHkgUHJlc2lkZW50aWFsIFxuICAgIERpcmVjdGl2ZSA5LURlZmVuc2Ugb2YgVW5pdGVkIFN0YXRlcyBBZ3JpY3VsdHVyZSBhbmQgRm9vZC5cbiAgICAgICAgXCIoMikgUHJvdmlkaW5nIG92ZXJzaWdodCBhbmQgaW50ZWdyYXRpb24gb2YgdGhlIERlcGFydG1lbnQncyBcbiAgICBhY3Rpdml0aWVzIHJlbGF0ZWQgdG8gdmV0ZXJpbmFyeSBwdWJsaWMgaGVhbHRoLCBmb29kIGRlZmVuc2UsIGFuZCBcbiAgICBhZ3JpY3VsdHVyYWwgc2VjdXJpdHkuXG4gICAgICAgIFwiKDMpIExlYWRpbmcgdGhlIERlcGFydG1lbnQncyBwb2xpY3kgaW5pdGlhdGl2ZXMgcmVsYXRpbmcgdG8gXG4gICAgZm9vZCwgYW5pbWFsLCBhbmQgYWdyaWN1bHR1cmFsIGluY2lkZW50cywgYW5kIHRoZSBpbXBhY3Qgb2Ygc3VjaCBcbiAgICBpbmNpZGVudHMgb24gYW5pbWFsIGFuZCBwdWJsaWMgaGVhbHRoLlxuICAgICAgICBcIig0KSBMZWFkaW5nIHRoZSBEZXBhcnRtZW50J3MgcG9saWN5IGluaXRpYXRpdmVzIHJlbGF0aW5nIHRvIFxuICAgIG92ZXJhbGwgZG9tZXN0aWMgcHJlcGFyZWRuZXNzIGZvciBhbmQgY29sbGVjdGl2ZSByZXNwb25zZSB0byBcbiAgICBhZ3JpY3VsdHVyYWwgdGVycm9yaXNtLlxuICAgICAgICBcIig1KSBDb29yZGluYXRpbmcgd2l0aCBvdGhlciBEZXBhcnRtZW50IGNvbXBvbmVudHMsIGluY2x1ZGluZyBcbiAgICBVLlMuIEN1c3RvbXMgYW5kIEJvcmRlciBQcm90ZWN0aW9uLCBhcyBhcHByb3ByaWF0ZSwgb24gYWN0aXZpdGllcyBcbiAgICByZWxhdGVkIHRvIGZvb2QgYW5kIGFncmljdWx0dXJlIHNlY3VyaXR5IGFuZCBzY3JlZW5pbmcgcHJvY2VkdXJlcyBcbiAgICBmb3IgZG9tZXN0aWMgYW5kIGltcG9ydGVkIHByb2R1Y3RzLlxuICAgICAgICBcIig2KSBDb29yZGluYXRpbmcgd2l0aCBhcHByb3ByaWF0ZSBGZWRlcmFsIGRlcGFydG1lbnRzIGFuZCBcbiAgICBhZ2VuY2llcy5cbiAgICAgICAgXCIoNykgT3RoZXIgYWN0aXZpdGllcyBhcyBkZXRlcm1pbmVkIG5lY2Vzc2FyeSBieSB0aGUgXG4gICAgU2VjcmV0YXJ5LlxuICAgIFwiKGMpIFJ1bGUgb2YgQ29uc3RydWN0aW9uLi0tTm90aGluZyBpbiB0aGlzIHNlY3Rpb24gbWF5IGJlIFxuY29uc3RydWVkIGFzIGFsdGVyaW5nIG9yIHN1cGVyc2VkaW5nIHRoZSBhdXRob3JpdHkgb2YgdGhlIFNlY3JldGFyeSBvZiBcbkFncmljdWx0dXJlIG9yIHRoZSBTZWNyZXRhcnkgb2YgSGVhbHRoIGFuZCBIdW1hbiBTZXJ2aWNlcy5cIi5cbiAgICAoYikgQ2xlcmljYWwgQW1lbmRtZW50Li0tVGhlIHRhYmxlIG9mIGNvbnRlbnRzIGluIHNlY3Rpb24gMShiKSBvZiBcbnRoZSBIb21lbGFuZCBTZWN1cml0eSBBY3Qgb2YgMjAwMiBpcyBhbWVuZGVkLS1cbiAgICAgICAgKDEpIGJ5IHN0cmlraW5nIHRoZSBpdGVtcyByZWxhdGluZyB0byBzZWN0aW9ucyA1MjMsIDUyNCwgNTI1LCBcbiAgICA1MjYsIGFuZCA1Mjc7IGFuZFxuICAgICAgICAoMikgYnkgaW5zZXJ0aW5nIGFmdGVyIHRoZSBpdGVtIHJlbGF0aW5nIHRvIHNlY3Rpb24gNTIyIHRoZSBcbiAgICBmb2xsb3dpbmc6XG5cblwiU2VjLiA1MjMuIEd1aWRhbmNlIGFuZCByZWNvbW1lbmRhdGlvbnMuXG5cIlNlYy4gNTI0LiBWb2x1bnRhcnkgcHJpdmF0ZSBzZWN0b3IgcHJlcGFyZWRuZXNzIGFjY3JlZGl0YXRpb24gYW5kIFxuICAgICAgICAgIGNlcnRpZmljYXRpb24gcHJvZ3JhbS5cblwiU2VjLiA1MjUuIEFjY2VwdGFuY2Ugb2YgZ2lmdHMuXG5cIlNlYy4gNTI2LiBJbnRlZ3JhdGVkIHB1YmxpYyBhbGVydCBhbmQgd2FybmluZyBzeXN0ZW0gbW9kZXJuaXphdGlvbi5cblwiU2VjLiA1MjcuIE5hdGlvbmFsIHBsYW5uaW5nIGFuZCBlZHVjYXRpb24uXG5cIlNlYy4gNTI4LiBDb29yZGluYXRpb24gb2YgRGVwYXJ0bWVudCBvZiBIb21lbGFuZCBTZWN1cml0eSBlZmZvcnRzIFxuICAgICAgICAgIHJlbGF0ZWQgdG8gZm9vZCwgYWdyaWN1bHR1cmUsIGFuZCB2ZXRlcmluYXJ5IGRlZmVuc2UgYWdhaW5zdCBcbiAgICAgICAgICB0ZXJyb3Jpc20uXCIuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwZWFrZXIgb2YgdGhlIEhvdXNlIG9mIFJlcHJlc2VudGF0aXZlcy5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZpY2UgUHJlc2lkZW50IG9mIHRoZSBVbml0ZWQgU3RhdGVzIGFuZCAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJlc2lkZW50IG9mIHRoZSBTZW5hdGUuYCJdfQ== */\n/*@ sourceURL=pages/index.js?entry */'
    }));
};

var Progress = function Progress(_ref3) {
    var percent = _ref3.percent;
    return _react2.default.createElement('div', { className: 'progress', 'data-jsx': 2821966835,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 53
        }
    }, _react2.default.createElement('div', { style: { width: percent + '%' }, 'data-jsx': 2821966835,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 54
        }
    }), _react2.default.createElement(_style2.default, {
        styleId: 2821966835,
        css: '.progress[data-jsx="2821966835"]{height:4px;background:#eee}.progress[data-jsx="2821966835"]>div[data-jsx="2821966835"]{background:' + hilight + ';height:100%}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=pages/index.js?entry */'
    }));
};

// https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript#2901298
var withcommas = function withcommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

var Actions = function Actions(_ref4) {
    var pledged = _ref4.pledged,
        goal = _ref4.goal,
        backers = _ref4.backers,
        daysleft = _ref4.daysleft,
        senator = _ref4.senator,
        vote = _ref4.vote,
        sex = _ref4.sex,
        number = _ref4.number;
    return _react2.default.createElement('div', { className: 'actions', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 71
        }
    }, _react2.default.createElement(Progress, { percent: pledged / goal * 100, __source: {
            fileName: _jsxFileName,
            lineNumber: 72
        }
    }), _react2.default.createElement('div', { className: 'metric', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 73
        }
    }, _react2.default.createElement('div', { className: 'metric-num raised', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 74
        }
    }, '$', withcommas(pledged)), _react2.default.createElement('div', { className: 'metric-num-desc', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 75
        }
    }, 'pledged of $', withcommas(goal), ' goal')), _react2.default.createElement('div', { className: 'metric', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 77
        }
    }, _react2.default.createElement('div', { className: 'metric-num', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 78
        }
    }, backers), _react2.default.createElement('div', { className: 'metric-num-desc', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 79
        }
    }, 'backers')), _react2.default.createElement('div', { className: 'metric', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 81
        }
    }, _react2.default.createElement('div', { className: 'metric-num', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 82
        }
    }, daysleft), _react2.default.createElement('div', { className: 'metric-num-desc', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 83
        }
    }, 'days to go')), _react2.default.createElement('div', { className: 'back', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 85
        }
    }, 'Buy this vote'), _react2.default.createElement('div', { className: 'semibacks', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 86
        }
    }, _react2.default.createElement('div', { className: 'remind', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 87
        }
    }, 'Remind Me'), _react2.default.createElement('div', { className: 'share', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 88
        }
    }, 'Share')), _react2.default.createElement('div', { className: 'info', 'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 90
        }
    }, _react2.default.createElement('b', {
        'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 91
        }
    }, _react2.default.createElement('u', {
        'data-jsx': 2134203246,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 91
        }
    }, 'Conditional Donation.')), ' If ', senator, ' votes ', vote ? 'YES' : 'NO', ' on ', number, ', the total amount raised (less processing fees) will be donated to ', possesive[sex], ' reelection campaign. If ', senator, ' votes ', !vote ? 'YES' : 'NO', ' on ', number, ', all donations will be refunded.'), _react2.default.createElement(_style2.default, {
        styleId: 2134203246,
        css: '.actions[data-jsx="2134203246"]{padding-left:40px;width:400px;margin-top:57px}.metric[data-jsx="2134203246"]{margin:20px 0}.metric-num[data-jsx="2134203246"]{font-size:200%}.raised[data-jsx="2134203246"]{color:' + hilight + '}.metric-num-desc[data-jsx="2134203246"]{opacity:.5}.back[data-jsx="2134203246"]{padding:20px 0;-webkit-text-align:center;text-align:center;background:' + hilight + ';color:#fff;border-radius:5px}.semibacks[data-jsx="2134203246"]{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin-top:20px}.semibacks[data-jsx="2134203246"]>div[data-jsx="2134203246"]{-webkit-flex:1;-ms-flex:1;flex:1;-webkit-text-align:center;text-align:center;padding:20px 0;background:#eee;border-radius:5px}.remind[data-jsx="2134203246"]{margin-right:5px}.info[data-jsx="2134203246"]{margin:10px 0;font-size:80%;opacity:.5}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=pages/index.js?entry */'
    }));
};

var Overview = function Overview(_ref5) {
    var senator = _ref5.senator,
        title = _ref5.title,
        vote = _ref5.vote,
        pledged = _ref5.pledged,
        backers = _ref5.backers,
        summary = _ref5.summary,
        summarySource = _ref5.summarySource;
    return _react2.default.createElement('div', { className: 'overview', 'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 141
        }
    }, _react2.default.createElement('p', {
        'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 142
        }
    }, 'Senator ', _react2.default.createElement('b', {
        'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 142
        }
    }, senator), ','), _react2.default.createElement('p', {
        'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 143
        }
    }, 'We the people of the United States of America demand that you vote ', _react2.default.createElement(Vote, { vote: vote, __source: {
            fileName: _jsxFileName,
            lineNumber: 143
        }
    }), ' on the ', _react2.default.createElement('b', {
        'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 143
        }
    }, title), ', the summary of which is as follows:'), _react2.default.createElement('blockquote', {
        'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 144
        }
    }, summary, ' ', _react2.default.createElement('span', { className: 'summary-source', 'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 144
        }
    }, '(', summarySource, ')')), _react2.default.createElement('p', {
        'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 145
        }
    }, 'If you faithfully represent us by voting ', _react2.default.createElement(Vote, { vote: vote, __source: {
            fileName: _jsxFileName,
            lineNumber: 145
        }
    }), ' on the ', _react2.default.createElement('b', {
        'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 145
        }
    }, title), ', we have pledged to donate the sum of ', _react2.default.createElement('span', { className: 'amount', 'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 145
        }
    }, '$', withcommas(pledged)), ' to your next reelection campaign.'), _react2.default.createElement('p', {
        'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 146
        }
    }, 'Yours Sincerely,'), _react2.default.createElement('p', {
        'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 147
        }
    }, _react2.default.createElement('b', {
        'data-jsx': 476972943,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 147
        }
    }, backers, ' United States Citizens')), _react2.default.createElement(_style2.default, {
        styleId: 476972943,
        css: '.summary-source[data-jsx="476972943"]{opacity:.5}.overview[data-jsx="476972943"]{line-height:150%;opacity:.9;padding:20px}.amount[data-jsx="476972943"]{color:' + hilight + '}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=pages/index.js?entry */'
    }));
};

var Bill = function Bill(_ref6) {
    var billText = _ref6.billText;
    return _react2.default.createElement('pre', {
        'data-jsx': 2667008327,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 165
        }
    }, billText, _react2.default.createElement(_style2.default, {
        styleId: 2667008327,
        css: 'pre[data-jsx="2667008327"]{padding:20px;max-height:400px;overflow:scroll;padding:20px;margin:0;box-sizing:border-box}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=pages/index.js?entry */'
    }));
};

var ContentTabs = function ContentTabs(_ref7) {
    var summary = _ref7.summary,
        senator = _ref7.senator,
        vote = _ref7.vote,
        title = _ref7.title,
        summarySource = _ref7.summarySource,
        billText = _ref7.billText,
        pledged = _ref7.pledged,
        backers = _ref7.backers,
        senatorInfo = _ref7.senatorInfo;
    return _react2.default.createElement('div', { className: 'tabs', 'data-jsx': 3486125593,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 180
        }
    }, _react2.default.createElement(_reactTabs.Tabs, { selectedTabClassName: 'active', selectedTabPanelClassName: 'tab-panel', __source: {
            fileName: _jsxFileName,
            lineNumber: 181
        }
    }, _react2.default.createElement(_reactTabs.TabList, { className: 'tab-list', __source: {
            fileName: _jsxFileName,
            lineNumber: 182
        }
    }, _react2.default.createElement(_reactTabs.Tab, {
        __source: {
            fileName: _jsxFileName,
            lineNumber: 183
        }
    }, 'Overview'), _react2.default.createElement(_reactTabs.Tab, {
        __source: {
            fileName: _jsxFileName,
            lineNumber: 184
        }
    }, 'Bill Text'), _react2.default.createElement(_reactTabs.Tab, {
        __source: {
            fileName: _jsxFileName,
            lineNumber: 185
        }
    }, 'Senator Information')), _react2.default.createElement(_reactTabs.TabPanel, {
        __source: {
            fileName: _jsxFileName,
            lineNumber: 188
        }
    }, _react2.default.createElement(Overview, {
        senator: senator,
        title: title,
        vote: vote,
        pledged: pledged,
        backers: backers,
        summary: summary,
        summarySource: summarySource,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 189
        }
    })), _react2.default.createElement(_reactTabs.TabPanel, {
        __source: {
            fileName: _jsxFileName,
            lineNumber: 199
        }
    }, _react2.default.createElement(Bill, { billText: billText, __source: {
            fileName: _jsxFileName,
            lineNumber: 200
        }
    })), _react2.default.createElement(_reactTabs.TabPanel, {
        __source: {
            fileName: _jsxFileName,
            lineNumber: 202
        }
    }, _react2.default.createElement('iframe', { src: senatorInfo, 'data-jsx': 3486125593,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 203
        }
    }))), _react2.default.createElement(_style2.default, {
        styleId: 3486125593,
        css: '.tab{background:red}.tab-list{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin:0;padding:0;border-bottom:1px solid #eee;height:60px}.tab-list li{display:block;padding:20px;cursor:pointer}.tab-list li.active{border-bottom:2px solid ' + hilight + '}iframe{border:0;width:100%;height:400px}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=pages/index.js?entry */'
    }));
};

var Pitch = function Pitch() {
    return _react2.default.createElement('div', { className: 'pitch', 'data-jsx': 1554231499,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 235
        }
    }, _react2.default.createElement('div', { className: 'content', 'data-jsx': 1554231499,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 236
        }
    }, _react2.default.createElement(ContentTabs, {
        senator: 'Robert Aderholt',
        title: 'Securing our Agriculture and Food Act',
        summary: 'H.R. 1238 amends the Homeland Security Act of 2002 to authorize a program to coordinate the Department of Homeland Security\u2019s efforts related to food, agriculture, and veterinary defense from acts of terrorism and other high-consequence events that pose a risk to homeland security.',
        billText: billText,
        pledged: 49249,
        backers: 701,
        senatorInfo: 'https://en.m.wikipedia.org/wiki/Robert_Aderholt',
        summarySource: 'Republican Policy Committee',
        __source: {
            fileName: _jsxFileName,
            lineNumber: 237
        }
    })), _react2.default.createElement(Actions, {
        pledged: 49249,
        goal: 87000,
        backers: 701,
        sex: 'm',
        number: 'H.R. 1238',
        senator: 'Robert Aderholt',
        daysleft: 4, __source: {
            fileName: _jsxFileName,
            lineNumber: 248
        }
    }), _react2.default.createElement(_style2.default, {
        styleId: 1554231499,
        css: '.content[data-jsx="1554231499"]{-webkit-flex:1;-ms-flex:1;flex:1}.pitch[data-jsx="1554231499"]{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=pages/index.js?entry */'
    }));
};

var Body = function (_React$Component) {
    (0, _inherits3.default)(Body, _React$Component);

    function Body() {
        (0, _classCallCheck3.default)(this, Body);

        return (0, _possibleConstructorReturn3.default)(this, (Body.__proto__ || (0, _getPrototypeOf2.default)(Body)).apply(this, arguments));
    }

    (0, _createClass3.default)(Body, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            /*
            window.disqus_config = function () {
                this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
                this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
            }
            */
            var d = document,
                s = d.createElement('script');
            s.src = 'https://conditionaldonations.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                number = _props.number,
                senator = _props.senator;

            console.log(number + "-" + senator);

            return _react2.default.createElement('div', { className: 'body', 'data-jsx': 1988293385,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 285
                }
            }, _react2.default.createElement('div', { id: 'disqus_thread', 'data-jsx': 1988293385,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 286
                }
            }), _react2.default.createElement(_style2.default, {
                styleId: 1988293385,
                css: '.body{margin-top:40px}#disqus_thread{margin:auto;width:1100px}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=pages/index.js?entry */'
            }));
        }
    }]);

    return Body;
}(_react2.default.Component);

var Title = function Title() {
    return _react2.default.createElement('div', { className: 'title', 'data-jsx': 1238223890,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 302
        }
    }, _react2.default.createElement('div', { className: 'item', 'data-jsx': 1238223890,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 303
        }
    }, 'Explore'), _react2.default.createElement('div', { className: 'item', 'data-jsx': 1238223890,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 304
        }
    }, 'About'), _react2.default.createElement('div', { className: 'item logo', 'data-jsx': 1238223890,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 305
        }
    }, 'LOBBY', _react2.default.createElement('span', { className: 'together', 'data-jsx': 1238223890,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 305
        }
    }, 'TOGETHER')), _react2.default.createElement('div', { className: 'spacer', 'data-jsx': 1238223890,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 306
        }
    }), _react2.default.createElement('div', { className: 'item', 'data-jsx': 1238223890,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 307
        }
    }, 'Log in'), _react2.default.createElement('div', { className: 'item', 'data-jsx': 1238223890,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 308
        }
    }, 'Sign up'), _react2.default.createElement(_style2.default, {
        styleId: 1238223890,
        css: '.title[data-jsx="1238223890"]{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin-bottom:20px;border-bottom:1px solid #eee;background:#fff}.item.logo[data-jsx="1238223890"]{position:absolute;left:50%;-webkit-transform:translate(-50%,0);-ms-transform:translate(-50%,0);transform:translate(-50%,0);font-size:20px;padding:19px}.spacer[data-jsx="1238223890"]{-webkit-flex:1;-ms-flex:1;flex:1}.together[data-jsx="1238223890"]{color:' + hilight + '}.item[data-jsx="1238223890"]{padding:20px;font-weight:bold;opacity:.7;cursor:pointer}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=pages/index.js?entry */'
    }));
};

exports.default = function () {
    return _react2.default.createElement('div', { className: 'app', 'data-jsx': 1577635751,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 338
        }
    }, _react2.default.createElement(Title, {
        __source: {
            fileName: _jsxFileName,
            lineNumber: 339
        }
    }), _react2.default.createElement('div', { className: 'wrap', 'data-jsx': 1577635751,
        __source: {
            fileName: _jsxFileName,
            lineNumber: 340
        }
    }, _react2.default.createElement(Header, {
        senator: 'Robert Aderholt',
        party: 'R',
        state: 'AL',
        number: 'H.R. 1238',
        title: 'Securing our Agriculture and Food Act', __source: {
            fileName: _jsxFileName,
            lineNumber: 341
        }
    }), _react2.default.createElement(Pitch, {
        __source: {
            fileName: _jsxFileName,
            lineNumber: 347
        }
    })), _react2.default.createElement(Body, {
        __source: {
            fileName: _jsxFileName,
            lineNumber: 349
        }
    }), _react2.default.createElement(_style2.default, {
        styleId: 1577635751,
        css: 'body{margin:0;background:#f5f5f5}.app{font-family:Helvetica}.wrap{width:1100px;margin:auto}\n/*# sourceMappingURL=data:application/json;base64, */\n/*@ sourceURL=pages/index.js?entry */'
    }));
};

var billText = '[Congressional Bills 115th Congress]\n[From the U.S. Government Publishing Office]\n[H.R. 1238 Enrolled Bill (ENR)]\n\n        H.R.1238\n\n                     One Hundred Fifteenth Congress\n\n                                 of the\n\n                        United States of America\n\n\n                          AT THE FIRST SESSION\n\n          Begun and held at the City of Washington on Tuesday,\n          the third day of January, two thousand and seventeen\n\n\n                                 An Act\n\n\n \n    To amend the Homeland Security Act of 2002 to make the Assistant \n   Secretary of Homeland Security for Health Affairs responsible for \ncoordinating the efforts of the Department of Homeland Security related \nto food, agriculture, and veterinary defense against terrorism, and for \n                             other purposes.\n\n    Be it enacted by the Senate and House of Representatives of the \nUnited States of America in Congress assembled,\nSECTION 1. SHORT TITLE.\n    This Act may be cited as the "Securing our Agriculture and Food \nAct".\nSEC. 2. COORDINATION OF FOOD, AGRICULTURE, AND VETERINARY DEFENSE \nAGAINST TERRORISM.\n    (a) In General.--Title V of the Homeland Security Act of 2002 (6 \nU.S.C. 311 et seq.) is amended by adding at the end the following new \nsection:\n    "SEC. 528. COORDINATION OF DEPARTMENT OF HOMELAND SECURITY EFFORTS \n      RELATED TO FOOD, AGRICULTURE, AND VETERINARY DEFENSE AGAINST \n      TERRORISM.\n    "(a) Program Required.--The Secretary, acting through the \nAssistant Secretary for Health Affairs, shall carry out a program to \ncoordinate the Department\'s efforts related to defending the food, \nagriculture, and veterinary systems of the United States against \nterrorism and other high-consequence events that pose a high risk to \nhomeland security.\n    "(b) Program Elements.--The coordination program required by \nsubsection (a) shall include, at a minimum, the following:\n        "(1) Providing oversight and management of the Department\'s \n    responsibilities pursuant to Homeland Security Presidential \n    Directive 9-Defense of United States Agriculture and Food.\n        "(2) Providing oversight and integration of the Department\'s \n    activities related to veterinary public health, food defense, and \n    agricultural security.\n        "(3) Leading the Department\'s policy initiatives relating to \n    food, animal, and agricultural incidents, and the impact of such \n    incidents on animal and public health.\n        "(4) Leading the Department\'s policy initiatives relating to \n    overall domestic preparedness for and collective response to \n    agricultural terrorism.\n        "(5) Coordinating with other Department components, including \n    U.S. Customs and Border Protection, as appropriate, on activities \n    related to food and agriculture security and screening procedures \n    for domestic and imported products.\n        "(6) Coordinating with appropriate Federal departments and \n    agencies.\n        "(7) Other activities as determined necessary by the \n    Secretary.\n    "(c) Rule of Construction.--Nothing in this section may be \nconstrued as altering or superseding the authority of the Secretary of \nAgriculture or the Secretary of Health and Human Services.".\n    (b) Clerical Amendment.--The table of contents in section 1(b) of \nthe Homeland Security Act of 2002 is amended--\n        (1) by striking the items relating to sections 523, 524, 525, \n    526, and 527; and\n        (2) by inserting after the item relating to section 522 the \n    following:\n\n"Sec. 523. Guidance and recommendations.\n"Sec. 524. Voluntary private sector preparedness accreditation and \n          certification program.\n"Sec. 525. Acceptance of gifts.\n"Sec. 526. Integrated public alert and warning system modernization.\n"Sec. 527. National planning and education.\n"Sec. 528. Coordination of Department of Homeland Security efforts \n          related to food, agriculture, and veterinary defense against \n          terrorism.".\n\n\n                               Speaker of the House of Representatives.\n\n                            Vice President of the United States and    \n                                               President of the Senate.';